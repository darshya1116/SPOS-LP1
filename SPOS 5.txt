

                               Practical 5


import threading
import time
import random

# Global variables for the shared settings
BUFFER_SIZE = 5
NUM_ITEMS = 10
NUM_READERS = 3
NUM_WRITERS = 2

# Shared buffer for Producer-Consumer
buffer = []
buffer_lock = threading.Lock()
items_available = threading.Semaphore(0)
space_available = threading.Semaphore(BUFFER_SIZE)

# Producer class
class Producer(threading.Thread):
    def run(self):
        for item_number in range(1, NUM_ITEMS + 1):
            item = random.randint(1, 100)  # Produce a random item
            space_available.acquire()  # Wait for space in the buffer
            with buffer_lock:  # Acquire lock to modify shared buffer
                buffer.append(item)
                print(f"Produced Item {item_number}: {item}, Buffer: {buffer}")
            items_available.release()  # Signal that an item is available
            time.sleep(random.uniform(0.1, 0.5))  # Simulate production time

# Consumer class
class Consumer(threading.Thread):
    def run(self):
        for item_number in range(1, NUM_ITEMS + 1):
            items_available.acquire()  # Wait for an item to be available
            with buffer_lock:  # Acquire lock to modify shared buffer
                item = buffer.pop(0)
                print(f"Consumed Item {item_number}: {item}, Buffer: {buffer}")
            space_available.release()  # Signal that space is available
            time.sleep(random.uniform(0.1, 0.5))  # Simulate consumption time

# Dining Philosophers Problem
class Philosopher(threading.Thread):
    def __init__(self, number, left_fork, right_fork, iterations):
        super().__init__()
        self.number = number
        self.left_fork = left_fork
        self.right_fork = right_fork
        self.iterations = iterations

    def run(self):
        for _ in range(self.iterations):  # Each philosopher will eat a certain number of times
            self.dine()

    def dine(self):
        print(f"Philosopher {self.number} is thinking.")
        time.sleep(random.uniform(0.1, 0.5))  # Simulate thinking time
        with self.left_fork, self.right_fork:  # Pick up forks
            print(f"Philosopher {self.number} is eating.")
            time.sleep(random.uniform(0.1, 0.5))  # Simulate eating time

# Readers-Writers Problem
class Reader(threading.Thread):
    def __init__(self, number, iterations):
        super().__init__()
        self.number = number
        self.iterations = iterations

    def run(self):
        for _ in range(self.iterations):  # Each reader will read a certain number of times
            self.read()

    def read(self):
        global read_count
        read_lock.acquire()  # Lock to modify read_count
        if read_count == 0:
            write_lock.acquire()  # Block writers if no readers are reading
        read_count += 1
        read_lock.release()

        # Reading section
        print(f"Reader {self.number} is reading.")
        time.sleep(random.uniform(0.1, 0.5))  # Simulate reading time

        read_lock.acquire()  # Lock to modify read_count
        read_count -= 1
        if read_count == 0:
            write_lock.release()  # Allow writers if no readers are reading
        read_lock.release()

class Writer(threading.Thread):
    def __init__(self, number):
        super().__init__()
        self.number = number

    def run(self):
        for _ in range(3):  # Each writer will write 3 times
            self.write()

    def write(self):
        write_lock.acquire()  # Block writers until they acquire the lock
        print(f"Writer {self.number} is writing.")
        time.sleep(random.uniform(0.1, 0.5))  # Simulate writing time
        write_lock.release()  # Release the lock after writing

# Global variables for the Readers-Writers Problem
read_count = 0
read_lock = threading.Lock()
write_lock = threading.Lock()

# Forks for the Dining Philosophers Problem
forks = [threading.Lock() for _ in range(5)]

# Main function to run the programs
def run_producer_consumer(buffer_size, num_items):
    global BUFFER_SIZE, NUM_ITEMS
    BUFFER_SIZE = buffer_size
    NUM_ITEMS = num_items
    print("Starting Producer-Consumer Problem:")
    producer = Producer()
    consumer = Consumer()
    producer.start()
    consumer.start()
    producer.join()
    consumer.join()

def run_dining_philosophers(iterations):
    print("\nStarting Dining Philosophers Problem:")
    philosophers = [Philosopher(i, forks[i], forks[(i + 1) % 5], iterations) for i in range(5)]
    for philosopher in philosophers:
        philosopher.start()
    for philosopher in philosophers:
        philosopher.join()

def run_readers_writers(num_read_operations):
    print("\nStarting Readers-Writers Problem:")
    readers = [Reader(i, num_read_operations) for i in range(NUM_READERS)]
    writers = [Writer(i) for i in range(NUM_WRITERS)]
    for reader in readers:
        reader.start()
    for writer in writers:
        writer.start()
    for reader in readers:
        reader.join()
    for writer in writers:
        writer.join()

def main():
    global NUM_READERS, NUM_WRITERS

    # Get user input for parameters
    buffer_size = int(input("Enter buffer size for Producer-Consumer: "))
    num_items = int(input("Enter the number of items for Producer-Consumer: "))
    iterations = int(input("Enter the number of iterations for each Philosopher: "))
    num_read_operations = int(input("Enter the number of read operations for Readers: "))
    
    while True:
        print("\nChoose a synchronization problem to run:")
        print("1. Producer-Consumer Problem")
        print("2. Dining Philosophers Problem")
        print("3. Readers-Writers Problem")
        print("4. Exit")
        
        choice = input("Enter your choice (1-4): ")
        
        if choice == '1':
            run_producer_consumer(buffer_size, num_items)
        elif choice == '2':
            run_dining_philosophers(iterations)
        elif choice == '3':
            run_readers_writers(num_read_operations)
        elif choice == '4':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()


OUTPUT : 
Enter buffer size for Producer-Consumer: 5
Enter the number of items for Producer-Consumer: 4
Enter the number of iterations for each Philosopher: 3
Enter the number of read operations for Readers: 2

Choose a synchronization problem to run:
1. Producer-Consumer Problem
2. Dining Philosophers Problem
3. Readers-Writers Problem
4. Exit
Enter your choice (1-4): 1
Starting Producer-Consumer Problem:
Produced Item 1: 47, Buffer: [47]
Consumed Item 1: 47, Buffer: []
Produced Item 2: 9, Buffer: [9]
Consumed Item 2: 9, Buffer: []
Produced Item 3: 7, Buffer: [7]
Consumed Item 3: 7, Buffer: []
Produced Item 4: 42, Buffer: [42]
Consumed Item 4: 42, Buffer: []

Choose a synchronization problem to run:
1. Producer-Consumer Problem
2. Dining Philosophers Problem
3. Readers-Writers Problem
4. Exit
Enter your choice (1-4): 2

Starting Dining Philosophers Problem:
Philosopher 0 is thinking.
Philosopher 1 is thinking.
Philosopher 2 is thinking.
Philosopher 3 is thinking.
Philosopher 4 is thinking.
Philosopher 0 is eating.
Philosopher 2 is eating.
Philosopher 0 is thinking.
Philosopher 4 is eating.
Philosopher 2 is thinking.
Philosopher 1 is eating.
Philosopher 4 is thinking.
Philosopher 3 is eating.
Philosopher 1 is thinking.
Philosopher 0 is eating.
Philosopher 0 is thinking.
Philosopher 3 is thinking.
Philosopher 2 is eating.
Philosopher 4 is eating.
Philosopher 2 is thinking.
Philosopher 1 is eating.
Philosopher 4 is thinking.
Philosopher 3 is eating.
Philosopher 1 is thinking.
Philosopher 0 is eating.
Philosopher 3 is thinking.
Philosopher 4 is eating.
Philosopher 2 is eating.
Philosopher 3 is eating.
Philosopher 1 is eating.

Choose a synchronization problem to run:
1. Producer-Consumer Problem
2. Dining Philosophers Problem
3. Readers-Writers Problem
4. Exit
Enter your choice (1-4): 3

Starting Readers-Writers Problem:
Reader 0 is reading.
Reader 2 is reading.
Reader 1 is reading.
Reader 1 is reading.
Reader 0 is reading.
Reader 2 is reading.
Writer 0 is writing.
Writer 0 is writing.
Writer 0 is writing.
Writer 1 is writing.
Writer 1 is writing.
Writer 1 is writing.

Choose a synchronization problem to run:
1. Producer-Consumer Problem
2. Dining Philosophers Problem
3. Readers-Writers Problem
4. Exit
Enter your choice (1-4): 4
Exiting...


...Program finished with exit code 0
Press ENTER to exit console.
